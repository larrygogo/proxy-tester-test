name: Release CI

# 指定工作流的触发器
on:
  push:
    # 匹配特定标签
    tags:
      - 'v*' # 推送事件匹配 v*, 例如 v1.0, v20.15.10 等可以触发工作流

jobs:
  # 创建 release 版本
  create-release:
    runs-on: [ self-hosted, linux ]
    outputs:
      RELEASE_UPLOAD_ID: ${{ steps.create_release.outputs.id }}

    steps:
      - name: Checkout code (检出代码)
        uses: actions/checkout@v4

      - name: Get version (查询版本号)
        id: get_version
        shell: bash
        run: |
          echo "using version tag ${GITHUB_REF:10}"
          echo "VERSION=${GITHUB_REF:10}" >> $GITHUB_OUTPUT

      - name: Create Release (创建发布)
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: '${{ steps.get_version.outputs.VERSION }}'
          release_name: 'ProxyTester ${{ steps.get_version.outputs.VERSION }}'
          body: 'See the assets to download this version and install.'

  build-tauri:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        platform: [ macOS, rust-windows ]

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout code (检出代码)
        uses: actions/checkout@v4

      #      - name: install System dependencies (安装系统依赖, 仅限于 ubuntu)
      #        if: matrix.platform == 'ubuntu-latest'
      #        run: |
      #          sudo apt-get update
      #          sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libappindicator3-dev librsvg2-dev patchelf

      - name: Setup Rust (设置 Rust 版本)
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache (Rust 缓存)
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Setup node (设置 node 版本和缓存)
        uses: actions/setup-node@v2
        with:
          node-version: 20
      #          cache: 'yarn'

      - name: Install frontend dependencies (安装前端依赖)
        run: yarn install

      - name: Build tauri (构建 tauri)
        uses: tauri-apps/tauri-action@v0

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          releaseId: ${{ needs.create-release.outputs.RELEASE_UPLOAD_ID }}

  # 生成静态资源并将其推送到 github pages
  updater:
    runs-on: [ self-hosted, linux ]
    needs: [ create-release, build-tauri ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - run: yarn && yarn updater
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: deploy install.json (部署 install.json)
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./updater
          force_orphan: true